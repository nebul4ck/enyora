		elif action=='import':
			''' Import from Excel '''
			#TODO
		elif action=='export':
			'''Export to Excel '''
		else:
			''' Show worked hours '''
			#TODO:
				#DAY
				#WEEK
				#MONTH

		# # Initialize Events Class
		# incident=Events()


		# ''' Ensure database and table exists Stage '''
		# try:
		# 	check_sql_config=sql.check_config(self.enyora_db, 
		# 		self.enyora_table)
		# except Exception as e:
		# 	print('[error] - %s' % e)
		# 	print('[error] - Database and/or table could not be created')
		# 	print('... exiting with errors')
		# 	exit(1)				


		# ''' Check the latest record Stage '''

		# # Request
		# data_request=sql.request_row(self.enyora_db, self.enyora_table, 
		# 	self.sql_latest_row)

		# # Format JSON data
		# json_list=registry_action.format_data(data_request)


		# ''' Set current date/time Stage '''
		# date_time=registry_action.set_date_time()
		# cur_date=date_time['date']
		# cur_time=date_time['time']




		# # Is the same date?
		# if req_date==cur_date:
		# 	# then the action could not be the same
		# 	cur_action=registry_action.test_action(req_action)

		# 	#set_action=incident.another_rec()

		# print(latest_row)
		# exit(0)
		# #if 
		# try:
		# 	reg_date=json_data_req[0][1]
		# 	reg_time=data_request[0][2]
		# 	reg_action=data_request[0][3]
		# except IndexError:
		# 	no_worked=True
		# 	print('')
		# except Exception as e:
		# 	print(e)
		# 	exit(1)

		# if reg_date==cur_date:
		# 	if reg_action==cur_action:
		# 		cur_action='out'
		# 		worked_time=registry_action.calc_work(reg_time, cur_time)

		# 	print('Horas trabajadas: %s' % worked)




HOLIDAYS!!

    # (if we pay attention to holidays)
    # def check_day(self, date):
    #     ''' return either [None] or [days] '''

    #     days=[]

    #     # Request
    #     data_request=self.sql.request_row(self.sql_date_select)

    #     if not data_request:
    #         days.append(None)
    #     else:
    #         latest_row=data_request[0]
    #         req_day=latest_row[0]
    #         if req_day==date:
    #             days.append(date)
    #         elif req_day!=date:
    #             req_day_obj=datetime.strptime(req_day, '%Y-%m-%d')
    #             date_obj=datetime.strptime(date, '%Y-%m-%d')
    #             diferencia=date_obj - req_day_obj
    #             num_days=str(diferencia).split(' ')[0]

    #             day_sum = 0
    #             for day in range(1, int(num_days) + 1):
    #                 day_sum += 1
    #                 current_date=req_day_obj + timedelta(days=day_sum)
    #                 days.append(str(current_date).split(' ')[0])

    #     return days
                # return list of days (if we pay attention to holidays)
            #days=self.check_day(current_date)
            #num_days=len(days)

            #elif num_days == 1:
                ''' Ensure the last action and current action are not
                    the same '''
                # El dia puede ser el ultimo (y unico) dia picado, o el dia de hoy
                # en cualquier caso hay que coprobar si las acciones no coinciden
                # Ademas si el dia no es el de hoy, la acción tuvo que ser out
                #self.compare_action(action, days[0])

            #elif num_days > 1:
                # Desplegar un menu que pregunte si todos los días anteriores
                # se ha estado de vacaciones (presentar lista). Quitar de la lista
                # dias indicados como festivos (sabados, domingos).
                # En un futuro igual cada usuario debe de ser capaz de marcar sus
                # dias de descanso (ie, hosteleria). Perfil JSON por cada usuario
                # Opciones si -> se insertan todos con day_off_work=1
                #           no -> indicar que marque el día que no estuve de vaaciones
                #           el resto marcarlo como vacaciones.
                #self.depl_man_insert(days)


            #     # Insert values
            #     self.sql.insert_record()

            # ''' Insert a new record '''

            # ''' Check if the latest action and current action
            #     are the same '''

            #     days=self.sql.check_day(date)




            #     # Is the first record in enyora_registry table
            #     if not days[0]:
            #         ''' Insert record '''
            #         print('[info] - Recording the first one register into office...')
                    
            #     elif days[0]==date:
            #         print('El día es hoy,')

            #         print(days)
            #         exit(0)
            #         # YA TENGO LA LISTA DE DIAS Y PUEDE SER TODAY, YESTERDAY O UNA LISTA DE FECHAS
            #         # SI ES UNA FECHA DE DIAS DETECTAR CUALES FUERON LOS 'FESTVOS' DEFINIR FESTIVOS EN CONF.
            #         # UNA VEZ QUITADOS LOS FESTIVOS, ENVIAR A MENU LOS DIAS Y ACTUAR EN CONSECUENCIA
            #         # Set requested values
            #         # data_request=[(7, '2019-07-12', '12:02', 'out', '', 0)]
            #         latest_row=data_request[0]
            #         rec_date=latest_row[1]
            #         rec_time=latest_row[2]
            #         rec_action=latest_row[3]
            #         rec_worked_time=latest_row[4]
            #         rec_day_off_work=latest_row[5]


            #         exit(0)

           # # Adding a new record

            # # Get the latest record in JSON format
            # latest_day_record=data_request[0]
            # latest_record_json=self.format_data(latest_day_record)
            # # requested values
            # latest_date=latest_record_json['date']
            # latest_time=latest_record_json['time']
            # latest_action=latest_record_json['action']
            # return latest_record_json

            # def get_rows(self):

            #     file = open('./dates.db','r')
            #     lines = file.readlines()

            #     entrance = lines[0].split('|')[1]
            #     leave = lines[-1].split('|')[1]

            #     times = {'start': entrance, 'leave': leave}

            #     return times

            # def insert_file_row(self, date, time):
            #     ''' Access to database and fill the row '''

            #     file = open('./dates.db','a')
            #     file.write('%s|%s\n' % (date,time))
            #     file.close



            # def run_menu(self):
            #     ''' exec program '''

            #     sel = int(input('\nSelect option:\n\t(1) Check-in\
            #                             \n\t(2) Check-out\n'))

            #     if sel == 1:
            #         print('-- Check in --')
            #         action = 'checkin'
            #         datime = self.set_date_time()

            #         data = {
            #                 'action': action,
            #                 'date': datime 
            #             }
            #     elif sel == 2:
            #         print ('-- Check out --')
            #         action = 'checkout'
            #         datime = self.set_date_time()

            #         data = {
            #                 'action': action,
            #                 'date': datime 
            #             }
            #     else:
            #         print('err: option not found.')
            #         exit(1)

            #     return data


            # fill_row = insert_row(date,time)

            # ##

            # time_json = get_rows()
            # start_hour = time_json['start'].strip()
            # finish_hour = time_json['leave'].strip()

            # diff = time_diference(start_hour, finish_hour)

            # print('La diferencia entre la entrada y la salida es: %s' % diff)
